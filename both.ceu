#ifdef CEUMAKER_ARDUINO
    #include "pcint1.ceu"
    #include "wclock.ceu"
    #include "usart.ceu"
    #include "pwm.ceu"
    #include "string.ceu"

    var int debounceTime = 150; //ms

    code/await Sound(none) -> (event none shoot, event none move) -> NEVER do
        var int buzzerPort = 5;

        par do
            loop do
                await shoot;
                spawn Pwm(buzzerPort, 100);
                await 80ms;
                spawn Pwm(buzzerPort, 0);
            end
        with
            loop do
                await move;
                spawn Pwm(buzzerPort, 255);
                await 40ms;
                spawn Pwm(buzzerPort, 0);
            end
        end
    end

    spawn USART_Init(19200);
    var& Sound sound = spawn Sound();

    call PCINT1_Enable(_PCINT8,  on); //A0 -> shoot btn
    call PCINT1_Enable(_PCINT9,  on); //A1 -> right btn
    call PCINT1_Enable(_PCINT10, on); //A2 -> left btn

    par do
        loop do
            var[2] byte str = [];
            await USART_Rx(&str, _);
            
            if call String_Equal_STR(&str, "S") then
                emit sound.shoot;
            else/if (call String_Equal_STR(&str, "R") or call String_Equal_STR(&str, "L")) then
                emit sound.move;
            end
        end
    with
        loop do
            await PCINT1;
            var high/low vBtnShoot = call PCINT1_Get(_PCINT8);  //A0 - shoot
            var high/low vBtnRight = call PCINT1_Get(_PCINT9);  //A1 - right
            var high/low vBtnLeft  = call PCINT1_Get(_PCINT10); //A2 - left

            // FUNCIONA
            if vBtnShoot then
                emit sound.shoot;
                var[2] byte str = [].."S";
                await USART_Tx(&str);
            else/if vBtnRight then
                emit sound.move;
                var[2] byte str = [].."R";
                await USART_Tx(&str);
            else/if vBtnLeft then
                emit sound.move;
                var[2] byte str = [].."L";
                await USART_Tx(&str);
            end    

            await (debounceTime)ms;
        end
    end
#elif defined CEUMAKER_PICO
    #include "usart.ceu"
    #include "string.ceu"

    spawn USART_Init("6", 19200);

    emit FRAMES_SET(yes);
    emit WINDOW_SET_GRID(no);
    emit GRAPHICS_SET_SCALE(0.3, 0.3);

    code/await Ship(none) -> (event none left, event none right, event none shoot) -> NEVER do
        var int frame = 1;
        var int x_axis = 0;
        var int x = 0;

        par do
            every FRAMES_REDRAW do
                emit GRAPHICS_SET_BMP_FRAME(frame,4);
                emit GRAPHICS_DRAW_BMP(x,-20, "res/ship.bmp");
            end
        with
            every FRAMES_UPDATE do
                if (x_axis == 1) and (x<21) then
                    x = x + 1;
                else/if (x_axis == -1) and (x>-21) then
                    x = x - 1;
                end
            end
        with
            every left do
                if (x_axis == 1) then
                    x_axis = 0;
                    frame = 1;
                else/if (x_axis == 0) then
                    x_axis = -1;
                    frame = 2;                    
                end
            end
        with
            every right do
                if (x_axis == -1) then
                    x_axis = 0;
                    frame = 1;
                else/if (x_axis == 0) then
                    x_axis = 1;
                    frame = 3;                    
                end
            end
        with
            code/await Shoot(var int x) -> none do
                var int y = -15;
                var int v = 40; //ms
                par/or do
                    every FRAMES_REDRAW do
                        emit GRAPHICS_SET_BMP_FRAME(0,1);
                        emit GRAPHICS_DRAW_BMP(x,y, "res/star.bmp");
                    end
                with
                    every (40)ms do
                        y = y+1;
                        if (y > 25) then
                            break;
                        end
                    end
                end
            end

            pool[] Shoot shoots;
            every shoot do
                spawn Shoot(x) in shoots;
            end
        end
    end

    var&? Ship ship = spawn Ship();

    par do
        every 10ms do
            var[2] byte str = [];
            await USART_Rx(&str, 2);

            if call String_Equal_STR(&str, "L") then
                emit ship!.left;
            else/if call String_Equal_STR(&str, "R") then
                emit ship!.right;
            else/if call String_Equal_STR(&str, "S") then
                emit ship!.shoot;
            end
        end
    with
        var int key;
        every key in KEY_PRESS do
            if key == KEY_LEFT then
                emit ship!.left;
                var[2] byte str = [].."L";
                await USART_Tx(&str);
            else/if key == KEY_RIGHT then
                emit ship!.right;
                var[2] byte str = [].."R";
                await USART_Tx(&str);
            else/if key == KEY_SPACE then
                emit ship!.shoot;
                var[2] byte str = [].."S";
                await USART_Tx(&str);
            end
        end
    end
#endif