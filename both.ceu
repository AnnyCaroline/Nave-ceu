//Vou o USART para linux

#ifdef CEUMAKER_ARDUINO
    #include "int0.ceu"
    #include "pcint0.ceu"
    #include "wclock.ceu"
    #include "usart.ceu"
    //#include "pwm.ceu"
    #include "out.ceu"

    output high/low OUT_11;

    var int debounceTime = 50+100; //examples/gpio-01.ceu. Como posso calcular isso?

    //Sem essa linha, o sound!.shoot (com pwm) nÃ£o funciona
    //spawn Pwm(11,0);

    emit OUT(13, low);

    code/await Sound(none) -> (event none shoot, event none move) -> NEVER do
        var int buzzerPort = 11;

        par do
            loop do
                await shoot;
                // spawn Pwm(11,10);
                emit OUT(11, high);
                await 40ms;
                emit OUT(11, low);
            end
        with
            loop do
                await move;
                emit OUT(11, high);
                await 40ms;
                emit OUT(11, low);
            end
        end
    end

    spawn USART_Init(9600);
    var& Sound sound = spawn Sound();

    call PCINT0_Enable(_PCINT0, on); //D8 -> right btn
    call PCINT0_Enable(_PCINT4, on); //D12 -> left btn

    par do
        loop do
            var[20] byte str = [];
            await USART_Rx(&str, _);

            emit sound.shoot;
        end
    with
        loop do
            await PCINT0;
            var high/low vBtnRight = call PCINT0_Get(_PCINT0);
            var high/low vBtnLeft  = call PCINT0_Get(_PCINT4);
            if vBtnRight or vBtnLeft then
                emit sound.move;
                var[2] byte str = [].."S";
                await USART_Tx(&str);
            end
            await (debounceTime)ms;
        end
    with
        loop do
            await INT0; //D2
            var high/low v = call INT0_Get();
            if (v == high) then
                emit sound.shoot;
                var[2] byte str = [].."S";
                await USART_Tx(&str);
            end
            await (debounceTime)ms;
        end
    end
#elif defined CEUMAKER_PICO
    #include "usart.ceu"

    spawn Usart(0); //passar uma string

    emit FRAMES_SET(yes);
    emit WINDOW_SET_GRID(no);
    emit GRAPHICS_SET_SCALE(0.3, 0.3);

    code/await Ship(none) -> (event none left, event none right, event none shoot) -> NEVER do
        var int frame = 1;
        var int x_axis = 0;
        var int x = 0;

        par do
            every FRAMES_REDRAW do
                emit GRAPHICS_SET_BMP_FRAME(frame,4);
                emit GRAPHICS_DRAW_BMP(x,-20, "res/ship.bmp");
            end
        with
            every FRAMES_UPDATE do
                if (x_axis == 1) and (x<21) then
                    x = x + 1;
                else/if (x_axis == -1) and (x>-21) then
                    x = x - 1;
                end
            end
        with
            every left do
                if (x_axis == 1) then
                    x_axis = 0;
                    frame = 1;
                else/if (x_axis == 0) then
                    x_axis = -1;
                    frame = 2;                    
                end
            end
        with
            every right do
                if (x_axis == -1) then
                    x_axis = 0;
                    frame = 1;
                else/if (x_axis == 0) then
                    x_axis = 1;
                    frame = 3;                    
                end
            end
        with
            code/await Shoot(var int x) -> none do
                var int y = -15;
                var int v = 40; //ms
                par/or do
                    every FRAMES_REDRAW do
                        emit GRAPHICS_SET_BMP_FRAME(0,1);
                        emit GRAPHICS_DRAW_BMP(x,y, "res/star.bmp");
                    end
                with
                    every (40)ms do
                        y = y+1;
                    end
                end
            end

            pool[] Shoot shoots;
            every shoot do
                spawn Shoot(x) in shoots;
            end
        end
    end

    var&? Ship ship = spawn Ship();

    var int key;
    every key in KEY_PRESS do
        if key == KEY_LEFT then
            emit ship!.left;
            var[2] byte str = [].."L";
            await Usart_TX(&str);
        else/if key == KEY_RIGHT then
            emit ship!.right;
            var[2] byte str = [].."R";
            await Usart_TX(&str);
        else/if key == KEY_SPACE then
            emit ship!.shoot;
            var[2] byte str = [].."S";
            await Usart_TX(&str);
        end
    end

    await FOREVER;

#endif